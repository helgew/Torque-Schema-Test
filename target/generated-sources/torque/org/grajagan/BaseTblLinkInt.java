package org.grajagan;


import java.math.BigDecimal;
import java.sql.Connection;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.List;

import org.apache.commons.lang.ObjectUtils;
import org.apache.torque.TorqueException;
import org.apache.torque.map.TableMap;
import org.apache.torque.om.BaseObject;
import org.apache.torque.om.ComboKey;
import org.apache.torque.om.DateKey;
import org.apache.torque.om.NumberKey;
import org.apache.torque.om.ObjectKey;
import org.apache.torque.om.SimpleKey;
import org.apache.torque.om.StringKey;
import org.apache.torque.om.Persistent;
import org.apache.torque.util.Criteria;
import org.apache.torque.util.Transaction;



                                                        
        
/**
 * This class was autogenerated by Torque on:
 *
 * [Tue Feb 28 18:28:16 PST 2012]
 *
 * You should not use this class directly.  It should not even be
 * extended all references should be to TblLinkInt
 */
public abstract class BaseTblLinkInt extends BaseObject
{
    /** Serial version */
    private static final long serialVersionUID = 1330482496170L;

    /** The Peer class */
    private static final TblLinkIntPeer peer =
        new TblLinkIntPeer();

        
    /** The value for the tbl2Id field */
    private int tbl2Id;
      
    /** The value for the tbl3Id field */
    private int tbl3Id;
  
            
    /**
     * Get the Tbl2Id
     *
     * @return int
     */
    public int getTbl2Id()
    {
        return tbl2Id;
    }

                              
    /**
     * Set the value of Tbl2Id
     *
     * @param v new value
     */
    public void setTbl2Id(int v) throws TorqueException
    {
    
                  if (this.tbl2Id != v)
              {
            this.tbl2Id = v;
            setModified(true);
        }
    
                                  
                if (aTbl2 != null && !(aTbl2.getTbl2Id() == v))
                {
            aTbl2 = null;
        }
      
              }
          
    /**
     * Get the Tbl3Id
     *
     * @return int
     */
    public int getTbl3Id()
    {
        return tbl3Id;
    }

                              
    /**
     * Set the value of Tbl3Id
     *
     * @param v new value
     */
    public void setTbl3Id(int v) throws TorqueException
    {
    
                  if (this.tbl3Id != v)
              {
            this.tbl3Id = v;
            setModified(true);
        }
    
                                  
                if (aTbl3 != null && !(aTbl3.getTbl3Id() == v))
                {
            aTbl3 = null;
        }
      
              }
  
      
        
                  
    
        private Tbl2 aTbl2;

    /**
     * Declares an association between this object and a Tbl2 object
     *
     * @param v Tbl2
     * @throws TorqueException
     */
    public void setTbl2(Tbl2 v) throws TorqueException
    {
            if (v == null)
        {
                          setTbl2Id( 0);
              }
        else
        {
            setTbl2Id(v.getTbl2Id());
        }
            aTbl2 = v;
    }

                        
    /**
     * Returns the associated Tbl2 object.
           * If it was not retrieved before, the object is retrieved from
     * the database
           *
     * @return the associated Tbl2 object
           * @throws TorqueException
           */
    public Tbl2 getTbl2()
              throws TorqueException
          {
              if (aTbl2 == null && (this.tbl2Id != 0))
        {
                              aTbl2 = Tbl2Peer.retrieveByPK(SimpleKey.keyFor(this.tbl2Id));
                          }
              return aTbl2;
    }

    /**
     * Return the associated Tbl2 object
     * If it was not retrieved before, the object is retrieved from
     * the database using the passed connection
     *
     * @param connection the connection used to retrieve the associated object
     *        from the database, if it was not retrieved before
     * @return the associated Tbl2 object
     * @throws TorqueException
     */
    public Tbl2 getTbl2(Connection connection)
        throws TorqueException
    {
        if (aTbl2 == null && (this.tbl2Id != 0))
        {
                          aTbl2 = Tbl2Peer.retrieveByPK(SimpleKey.keyFor(this.tbl2Id), connection);
                      }
        return aTbl2;
    }

    /**
     * Provides convenient way to set a relationship based on a
     * ObjectKey, for example
     * <code>bar.setFooKey(foo.getPrimaryKey())</code>
     *
         */
    public void setTbl2Key(ObjectKey key) throws TorqueException
    {
      
                        setTbl2Id(((NumberKey) key).intValue());
                  }
    
        
                  
    
        private Tbl3 aTbl3;

    /**
     * Declares an association between this object and a Tbl3 object
     *
     * @param v Tbl3
     * @throws TorqueException
     */
    public void setTbl3(Tbl3 v) throws TorqueException
    {
            if (v == null)
        {
                          setTbl3Id( 0);
              }
        else
        {
            setTbl3Id(v.getTbl3Id());
        }
            aTbl3 = v;
    }

                        
    /**
     * Returns the associated Tbl3 object.
           * If it was not retrieved before, the object is retrieved from
     * the database
           *
     * @return the associated Tbl3 object
           * @throws TorqueException
           */
    public Tbl3 getTbl3()
              throws TorqueException
          {
              if (aTbl3 == null && (this.tbl3Id != 0))
        {
                              aTbl3 = Tbl3Peer.retrieveByPK(SimpleKey.keyFor(this.tbl3Id));
                          }
              return aTbl3;
    }

    /**
     * Return the associated Tbl3 object
     * If it was not retrieved before, the object is retrieved from
     * the database using the passed connection
     *
     * @param connection the connection used to retrieve the associated object
     *        from the database, if it was not retrieved before
     * @return the associated Tbl3 object
     * @throws TorqueException
     */
    public Tbl3 getTbl3(Connection connection)
        throws TorqueException
    {
        if (aTbl3 == null && (this.tbl3Id != 0))
        {
                          aTbl3 = Tbl3Peer.retrieveByPK(SimpleKey.keyFor(this.tbl3Id), connection);
                      }
        return aTbl3;
    }

    /**
     * Provides convenient way to set a relationship based on a
     * ObjectKey, for example
     * <code>bar.setFooKey(foo.getPrimaryKey())</code>
     *
         */
    public void setTbl3Key(ObjectKey key) throws TorqueException
    {
      
                        setTbl3Id(((NumberKey) key).intValue());
                  }
       
                
    private static List fieldNames = null;

    /**
     * Generate a list of field names.
     *
     * @return a list of field names
     */
    public static synchronized List getFieldNames()
    {
        if (fieldNames == null)
        {
            fieldNames = new ArrayList();
              fieldNames.add("Tbl2Id");
              fieldNames.add("Tbl3Id");
              fieldNames = Collections.unmodifiableList(fieldNames);
        }
        return fieldNames;
    }

    /**
     * Retrieves a field from the object by field (Java) name passed in as a String.
     *
     * @param name field name
     * @return value
     */
    public Object getByName(String name)
    {
          if (name.equals("Tbl2Id"))
        {
                return new Integer(getTbl2Id());
            }
          if (name.equals("Tbl3Id"))
        {
                return new Integer(getTbl3Id());
            }
          return null;
    }

    /**
     * Set a field in the object by field (Java) name.
     *
     * @param name field name
     * @param value field value
     * @return True if value was set, false if not (invalid name / protected field).
     * @throws IllegalArgumentException if object type of value does not match field object type.
     * @throws TorqueException If a problem occures with the set[Field] method.
     */
    public boolean setByName(String name, Object value )
        throws TorqueException, IllegalArgumentException
    {
          if (name.equals("Tbl2Id"))
        {
                      if (value == null || ! (Integer.class.isInstance(value)))
            {
                throw new IllegalArgumentException("setByName: value parameter was null or not an Integer object.");
            }
            setTbl2Id(((Integer) value).intValue());
                      return true;
        }
          if (name.equals("Tbl3Id"))
        {
                      if (value == null || ! (Integer.class.isInstance(value)))
            {
                throw new IllegalArgumentException("setByName: value parameter was null or not an Integer object.");
            }
            setTbl3Id(((Integer) value).intValue());
                      return true;
        }
          return false;
    }

    /**
     * Retrieves a field from the object by name passed in
     * as a String.  The String must be one of the static
     * Strings defined in this Class' Peer.
     *
     * @param name peer name
     * @return value
     */
    public Object getByPeerName(String name)
    {
          if (name.equals(TblLinkIntPeer.TBL2_ID))
        {
                return new Integer(getTbl2Id());
            }
          if (name.equals(TblLinkIntPeer.TBL3_ID))
        {
                return new Integer(getTbl3Id());
            }
          return null;
    }

    /**
     * Set field values by Peer Field Name
     *
     * @param name field name
     * @param value field value
     * @return True if value was set, false if not (invalid name / protected field).
     * @throws IllegalArgumentException if object type of value does not match field object type.
     * @throws TorqueException If a problem occures with the set[Field] method.
     */
    public boolean setByPeerName(String name, Object value)
        throws TorqueException, IllegalArgumentException
    {
        if (TblLinkIntPeer.TBL2_ID.equals(name))
        {
            return setByName("Tbl2Id", value);
        }
        if (TblLinkIntPeer.TBL3_ID.equals(name))
        {
            return setByName("Tbl3Id", value);
        }
          return false;
    }

    /**
     * Retrieves a field from the object by Position as specified
     * in the xml schema.  Zero-based.
     *
     * @param pos position in xml schema
     * @return value
     */
    public Object getByPosition(int pos)
    {
            if (pos == 0)
        {
                return new Integer(getTbl2Id());
            }
              if (pos == 1)
        {
                return new Integer(getTbl3Id());
            }
              return null;
    }

    /**
     * Set field values by its position (zero based) in the XML schema.
     *
     * @param position The field position
     * @param value field value
     * @return True if value was set, false if not (invalid position / protected field).
     * @throws IllegalArgumentException if object type of value does not match field object type.
     * @throws TorqueException If a problem occures with the set[Field] method.
     */
    public boolean setByPosition(int position, Object value)
        throws TorqueException, IllegalArgumentException
    {
        if (position == 0)
        {
            return setByName("Tbl2Id", value);
        }
          if (position == 1)
        {
            return setByName("Tbl3Id", value);
        }
              return false;
    }
     
    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
     *
     * @throws Exception
     */
    public void save() throws Exception
    {
          save(TblLinkIntPeer.DATABASE_NAME);
      }

    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
       * Note: this code is here because the method body is
     * auto-generated conditionally and therefore needs to be
     * in this file instead of in the super class, BaseObject.
       *
     * @param dbName
     * @throws TorqueException
     */
    public void save(String dbName) throws TorqueException
    {
        Connection con = null;
          try
        {
            con = Transaction.begin(dbName);
            save(con);
            Transaction.commit(con);
        }
        catch(TorqueException e)
        {
            Transaction.safeRollback(con);
            throw e;
        }
      }

      /** flag to prevent endless save loop, if this object is referenced
        by another object which falls in this transaction. */
    private boolean alreadyInSave = false;
      /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.  This method
     * is meant to be used as part of a transaction, otherwise use
     * the save() method and the connection details will be handled
     * internally
     *
     * @param con
     * @throws TorqueException
     */
    public void save(Connection con) throws TorqueException
    {
          if (!alreadyInSave)
        {
            alreadyInSave = true;


  
            // If this object has been modified, then save it to the database.
            if (isModified())
            {
                if (isNew())
                {
                    TblLinkIntPeer.doInsert((TblLinkInt) this, con);
                    setNew(false);
                }
                else
                {
                    TblLinkIntPeer.doUpdate((TblLinkInt) this, con);
                }
                }

                      alreadyInSave = false;
        }
      }

  
  
    /**
     * returns an id that differentiates this object from others
     * of its class.
     */
    public ObjectKey getPrimaryKey()
    {
          return null;
      }
 

    /**
     * Makes a copy of this object.
     * It creates a new object filling in the simple attributes.
       * It then fills all the association collections and sets the
     * related objects to isNew=true.
       */
      public TblLinkInt copy() throws TorqueException
    {
            return copy(true);
        }
  
          /**
     * Makes a copy of this object.
     * It creates a new object filling in the simple attributes.
     * If the parameter deepcopy is true, it then fills all the
     * association collections and sets the related objects to
     * isNew=true.
     *
     * @param deepcopy whether to copy the associated objects.
     */
    public TblLinkInt copy(boolean deepcopy) throws TorqueException
    {
        return copyInto(new TblLinkInt(), deepcopy);
    }
      
      /**
     * Fills the copyObj with the contents of this object.
     * The associated objects are also copied and treated as new objects.
     * @param copyObj the object to fill.
     */
    protected TblLinkInt copyInto(TblLinkInt copyObj) throws TorqueException
    {
        return copyInto(copyObj, true);
    }
  
    /**
     * Fills the copyObj with the contents of this object.
       * If deepcopy is true, The associated objects are also copied
     * and treated as new objects.
       * @param copyObj the object to fill.
       * @param deepcopy whether the associated objects should be copied.
       */
      protected TblLinkInt copyInto(TblLinkInt copyObj, boolean deepcopy) throws TorqueException
      {
          copyObj.setTbl2Id(tbl2Id);
          copyObj.setTbl3Id(tbl3Id);
  
              
          if (deepcopy)
        {
            }
          return copyObj;
    }

    /**
     * returns a peer instance associated with this om.  Since Peer classes
     * are not to have any instance attributes, this method returns the
     * same instance for all member of this class. The method could therefore
     * be static, but this would prevent one from overriding the behavior.
     */
    public TblLinkIntPeer getPeer()
    {
        return peer;
    }

    /**
     * Retrieves the TableMap object related to this Table data without
     * compiler warnings of using getPeer().getTableMap().
     *
     * @return The associated TableMap object.
     */
    public TableMap getTableMap() throws TorqueException
    {
        return TblLinkIntPeer.getTableMap();
    }


    public String toString()
    {
        StringBuffer str = new StringBuffer();
        str.append("TblLinkInt:\n");
        str.append("Tbl2Id = ")
               .append(getTbl2Id())
             .append("\n");
        str.append("Tbl3Id = ")
               .append(getTbl3Id())
             .append("\n");
        return(str.toString());
    }
}
